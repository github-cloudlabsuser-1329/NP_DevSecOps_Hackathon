name: update contoso traders app

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths:
      [
        "src/ContosoTraders.Api.Carts/**",
        "src/ContosoTraders.Api.Core/**",
        "src/ContosoTraders.Api.Images/**",
        "src/ContosoTraders.Api.Products/**",
        "src/ContosoTraders.Ui.Website/**",
      ]

env:
  # You can specify any location for `SUB_DEPLOYMENT_REGION`. It's the region where the deployment
  # metadata will be stored, and not where the resource groups will be deployed.
  ACR_NAME: contosotradersacr-np
  AKS_CLUSTER_NAME: contoso-traders-aks-np
  AKS_DNS_LABEL: contoso-traders-products-np
  AKS_NODES_RESOURCE_GROUP_NAME: contoso-traders-aks-nodes-rg-np-${{ vars.SUFFIX }}
  AKS_SECRET_NAME_ACR_PASSWORD: contoso-traders-acr-password-np
  AKS_SECRET_NAME_KV_ENDPOINT: contoso-traders-kv-endpoint-np
  AKS_SECRET_NAME_MI_CLIENTID: contoso-traders-mi-clientid-np
  CARTS_ACA_NAME: contoso-traders-carts-np
  CARTS_ACR_REPOSITORY_NAME: contosotradersapicarts-np
  CDN_PROFILE_NAME: contoso-traders-cdn-np
  SUB_DEPLOYMENT_REGION: westeurope
  KV_NAME: contosotraderskv-np
  PRODUCTS_ACR_REPOSITORY_NAME: contosotradersapiproducts-np
  PRODUCTS_DB_NAME: productsdb-np
  PRODUCTS_DB_SERVER_NAME: contoso-traders-products-np
  PRODUCTS_DB_USER_NAME: localadmin-np
  PRODUCT_DETAILS_CONTAINER_NAME: product-details-np
  PRODUCT_IMAGES_STORAGE_ACCOUNT_NAME: contosotradersimg-np
  PRODUCT_LIST_CONTAINER_NAME: product-list-np
  PRODUCTS_CDN_ENDPOINT_NAME: contoso-traders-images-np
  RESOURCE_GROUP_NAME: contosotraders-np-${{ vars.SUFFIX }}
  STORAGE_ACCOUNT_NAME: contosotradersimg-np
  UI_CDN_ENDPOINT_NAME: contoso-traders-ui2-np
  UI_STORAGE_ACCOUNT_NAME: contosotradersui2-np
  USER_ASSIGNED_MANAGED_IDENTITY_NAME: contoso-traders-mi-kv-access-np

jobs:
  provision-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SERVICEPRINCIPAL }}
      # Add the logged-in service principal to the key vault access policy
      - name: add service principal to kv access policy
        uses: azure/CLI@v1
        with:
          failOnStderr: false
          inlineScript: az keyvault set-policy -n ${{ env.KV_NAME }}${{ secrets.ENVIRONMENT }} --secret-permissions get list set --object-id $(az ad sp show --id $(az account show --query "user.name" -o tsv) --query "id" -o tsv)
      # The AKS agent pool needs to be assigned the user-assigned managed identity created (which has kv access)
      - name: assign user-assigned managed-identity to aks agentpool
        uses: azure/CLI@v1
        with:
          failOnStderr: false
          inlineScript: |
            az vmss identity assign \
              --identities $(az identity show -g ${{ env.RESOURCE_GROUP_NAME }} --name ${{ env.USER_ASSIGNED_MANAGED_IDENTITY_NAME }}${{ secrets.ENVIRONMENT }} --query "id" -o tsv) \
              --ids $(az vmss list -g ${{ env.AKS_NODES_RESOURCE_GROUP_NAME }} --query "[0].id" -o tsv) \
      # Seed the DBs and storage accounts
      - name: seed products db
        uses: azure/sql-action@v2
        with:
          failOnStderr: false
          connection-string: Server=tcp:${{ env.PRODUCTS_DB_SERVER_NAME }}${{ secrets.ENVIRONMENT }}.database.windows.net,1433;Initial Catalog=${{ env.PRODUCTS_DB_NAME }};Persist Security Info=False;User ID=${{ env.PRODUCTS_DB_USER_NAME }};Password=${{ secrets.SQL_PASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
          path: ./src/ContosoTraders.Api.Products/Migration/productsdb.sql
      - name: seed product image (product details)
        uses: azure/CLI@v1
        with:
          failOnStderr: false
          inlineScript: az storage blob sync --account-name '${{ env.PRODUCT_IMAGES_STORAGE_ACCOUNT_NAME }}${{ secrets.ENVIRONMENT }}' -c '${{ env.PRODUCT_DETAILS_CONTAINER_NAME }}' -s 'src/ContosoTraders.Api.Images/product-details'
      - name: seed product image (product list)
        uses: azure/CLI@v1
        with:
          inlineScript: az storage blob sync --account-name '${{ env.PRODUCT_IMAGES_STORAGE_ACCOUNT_NAME }}${{ secrets.ENVIRONMENT }}' -c '${{ env.PRODUCT_LIST_CONTAINER_NAME }}' -s 'src/ContosoTraders.Api.Images/product-list'
      - name: purge CDN endpoint
        uses: azure/CLI@v1
        with:
          failOnStderr: false
          inlineScript: az cdn endpoint purge --no-wait --content-paths '/*' -n '${{ env.PRODUCTS_CDN_ENDPOINT_NAME }}${{ secrets.ENVIRONMENT }}' -g '${{ env.RESOURCE_GROUP_NAME }}' --profile-name '${{ env.CDN_PROFILE_NAME }}${{ secrets.ENVIRONMENT }}'